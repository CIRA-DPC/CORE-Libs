name: Build Linux Intel

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-linux-intel:
    runs-on: ubuntu-latest

    env:
      CC: icc
      FC: ifort
      CXX: icpc
      COMPILER_SET: intel
      DEBIAN_FRONTEND: noninteractive

    steps:
      - name: Install Intel compilers
        run: |
          sudo apt-get update
          sudo apt-get upgrade -y
          sudo apt-get install -y --no-install-recommends \
            curl ca-certificates gpg-agent software-properties-common
          sudo curl -fsSL https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB | gpg --dearmor | tee /usr/share/keyrings/intel-oneapi-archive-keyring.gpg > /dev/null
          echo "deb [signed-by=/usr/share/keyrings/intel-oneapi-archive-keyring.gpg] https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list > /dev/null
          sudo apt-get update
          sudo apt-get upgrade -y
          sudo apt-get install -y --no-install-recommends \
            ca-certificates \
            build-essential \
            pkg-config \
            gnupg \
            libarchive13 \
            openssh-server \
            openssh-client \
            wget \
            net-tools \
            git \
            cmake \
            m4 \
            intel-oneapi-compiler-dpcpp-cpp-and-cpp-classic-2023.1.0 \
            intel-oneapi-compiler-fortran-2023.1.0

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # - name: Install system packages
      #   run: |
      #     # Need to remove this because of GPG key error
      #     # Not needed now that compilers are installed
      #     rm /etc/apt/sources.list.d/oneAPI.list
      #     apt update
      #     apt install -y m4

      - name: Debug make
        run: make debug

      - name: Build base libraries
        run: make base

      - name: "Debug: List libs and headers"
        run: |
          source /opt/intel/oneapi/setvars.sh
          echo -e "\n==============="
          echo "Built libraries"
          echo "==============="
          ls -lR build/lib
          echo -e "\n============="
          echo "Built headers"
          echo "============="
          ls -lR build/include

      - name: Build all libraries
        run: |
          source /opt/intel/oneapi/setvars.sh
          make all

      - name: Build package
        id: build
        run: |
          source /opt/intel/oneapi/setvars.sh
          make package PACK_VER=$(git describe --tags)

      - name: Set variables
        id: setvars
        run: |
          pack_fname=$(./create_package_fname.sh core_libs \
              $(git describe --tags) intel)
          echo "PACKAGE NAME: $pack_fname"
          echo "pack_fname=$pack_fname" >> $GITHUB_OUTPUT

      - name: Upload artifact to GitHub
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.setvars.outputs.pack_fname }}
          path: packages/${{ steps.setvars.outputs.pack_fname }}

      - name: Upload package
        run: |
          curl -s -T $(ls packages/*.tar.gz) \
            -u ${{ secrets.LIB_UPLOAD_USER }}:${{ secrets.LIB_UPLOAD_URL }} \
            ${{ secrets.LIB_UPLOAD_URL }}
